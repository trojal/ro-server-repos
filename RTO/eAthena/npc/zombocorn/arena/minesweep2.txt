/////////////////////////////////////////////////////////////////////////////////////////////////\
//  Minesweeper! // v0.93 ////////////////////////////////////////////////////////////////////////\
///////////////////////////////////////////////////////////////////////////////////////////////////\
//=========== Written by =========================================================================//
// Dubby                                                                                          //
//=========== Compatible with ====================================================================//
// Tested with SVN 2555 Version                                                                   //
//                                                                                                //
//=========== Description ========================================================================//
// This is a 9x9 poring version of the infamous pc game, Minesweeper.                             //
//                                                                                                //
//=========== Map Info ===========================================================================//
// ["minesweep2" is "job_knt"]                                                            //
//                                                                                                //
//=========== Version History ====================================================================//
// v0.93 - [Dubby] - Debugging completed, script is fully functional, albeit a few kinks          //
//                                                                                                //
//=========== Known Problems =====================================================================//
// 1. [Dubby] Bizarre "shrinking" problem rarely affects tiles 72 - 81 (Does not affect the       //
//            gameplay in the least bit)                                                          //
// 2. [Dubby] Occassional "mismatched" victory points cause an early victory.  Only occurs when   //
//            there are only a few porings left to click on, such as 2 or 3.                      //
//                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////

//---Mapflags----------------------------------------------------------------------------------
minesweep2	mapflag	nosave	SavePoint
minesweep2	mapflag	noreturn
minesweep2	mapflag	pvp	off
minesweep2	mapflag	nopenalty
minesweep2	mapflag	nozenypenalty
minesweep2	mapflag	nomemo
minesweep2	mapflag	nobranch
minesweep2	mapflag	noteleport
minesweep2	mapflag	nowarp
minesweep2	mapflag	nowarpto

//---Main NPC----------------------------------------------------------------------------------
minesweep2,124,75,5	script	Mine2Control	770,{
		if ($@MS2Ready == 1) goto M_NotReady;
	M_Menu:
		if ($@MS2On == 1) goto M_Menu2;
		mes "[Room Controller]";
		mes "Hello "+strcharinfo(0)+", welcome to Minesweeper!  This is room 1.";
		next;
		if (getgmlevel() == 0) menu "Information",M_Info,"Start Game",-,"Leave Room",M_Exit;
		if (getgmlevel() > 79) menu "Information",M_Info,"Start Game",-,"Control Panel",M_Control,"Leave Room",M_Exit;
	M_Start:
		mes "[Room Controller]";
		mes "The board is 9x9, with 81 tiles.  You may set the mine count to a minimum of "+$MS2Minimum+", and a maximum of "+$MS2Maximum+".";
		next;
		mes "[Room Controller]";
		mes "Please input the amount of mines to be planted on the field.";
	M_RepeatInput:
		next;
		input $@MS2Amount;
		next;
		if ($@MS2Amount < $MS2Minimum || $@MS2Amount > $MS2Maximum) message strcharinfo(0),"The number cannot be below "+$MS2Minimum+", and cannot be above "+$MS2Maximum+"!";
		if ($@MS2Amount < $MS2Minimum || $@MS2Amount > $MS2Maximum) goto M_RepeatInput;
		mes "[Room Controller]";
		mes "Alright, you have set "+$@MS2Amount+" mines!  The room will activate shortly!";
		close2;
		set $@MS2On,1;
		goto L_Timer;
	M_Menu2:
		if ($@MS2CD == 1) end;
		mes "[Room Controller]";
		mes "The game is in progress.  What would you like to do?";
		mes " ";
		mes " ";
		set $@MS2MNTM,(((getnpctimer(0,"Mine2Control") / 2000) / 60) %60);
		set $@MS2SETM,((getnpctimer(0,"Mine2Control") / 2000) % 60);
		if ($@MS2SETM == 0 ) goto M_NewMin1;
		if ($@MS2SETM >= 51 ) goto M_Addzero1;
		mes "[Time remaining: " + (4-$@MS2MNTM) + ":" + (60-$@MS2SETM) + "]";
		goto M_Menu2a;
	M_NewMin1:
		mes "[Time remaining: " + (5-$@MS2MNTM) + ":00]";
		goto M_Menu2a;
	M_Addzero1:
		mes "[Time remaining: " + (4-$@MS2MNTM) + ":0" + (60-$@MS2SETM) + "]";
		goto M_Menu2a;
	M_Menu2a:
		next;
		if (getgmlevel() == 0) menu "Cancel",-,"Information and Rules",M_Info,"Leave Room",M_Warpout;
		if (getgmlevel() > 79) menu "Cancel",-,"Information and Rules",M_Info,"Control Panel",M_Control,"Leave Room",M_Warpout;
		close;
	M_Info:
		mes "[Room Controller]";
		mes "Firstly, the game is a 9x9 grid of tiles (porings).  That's 81 tiles.  There are a certain number of hidden mines on the field.";
		next;
		mes "[Room Controller]";
		mes "The goal of the game is to 'Flag' all the mines.  If you click on a tile and there is a mine there, game over!";
		next;
		mes "[Room Controller]";
		mes "When you click on a tile, the tile will be flagged, and turn blue.  If you click on a flagged tile, it will open up.  If there's nothing there, a chain reaction will start.  If there's a number there, it'll show the number.  If there's a mine there, game over!";
		next;
		mes "[Room Controller]";
		mes "Be careful!  You only have ONE chance to flag a tile!  No flagging and unflagging here.";
		next;
		mes "[Room Controller]";
		if ($MS2Window == 0) mes "Now about the tiles.  Yellow means the tile has not been clicked on yet.  Blue means the tile is flagged.  And if red, it will have a waiting room window with a number inside.  Say, if there is a red tile with a '5' in the waiting room, then that means there are 5 mines within a 3x3 box centered on that tile.";
		if ($MS2Window == 1) mes "Now about the tiles.  Yellow means the tile has not been clicked on yet.  Blue means the tile is flagged.  And if red, the npc's name will be the number of that tile.  Say, if there is a red tile with a '5' in the waiting room, then that means there are 5 mines within a 3x3 box centered on that tile.";
		if ($MS2Window == 2) mes "Now about the tiles.  Yellow means the tile has not been clicked on yet.  Blue means the tile is flagged.  And if red, it will have a waiting room window with a number inside and a waiting room with the number in there too.  Say, if there is a red tile with a '5' in the waiting room, then that means there are 5 mines within a 3x3 box centered on that tile.";
		next;
		mes "[Room Controller]";
		mes "You get points for clicking on a tile that has a number on it.  You have to finish the game to get any kind of reward though!";
		next;
		mes "[Room Controller]";
		mes "Reward is based on the amount of points you accumulate from opening numbered tiles, and how many mines there are on the field.";
		next;
		mes "[Room Controller]";
		mes "This is also a minigame you can play by yourself.  And that's about it!";
		next;
		goto M_Menu;
	M_Wait:
		mes "[Room Controller]";
		mes "Alright.";
		close;
	M_Warpout:
		mes "[Room Controller]";
		mes "The game is in progress, are you sure you want to leave?";
		next;
		menu "No, I'll stay",M_Wait,"Yes.",M_Exit;
	M_Exit:
		mes "[Room Controller]";
		mes "Please enjoy your stay in the Arena!";
		if (@MSpt > 0) set @MSpt,0;
		close2;
	warp "pvp_m_room", 51, 38;
		end;
	M_NotReady:
		mes "[Room Controller]";
		mes "Hello "+strcharinfo(0)+", this room has ended and is in a cooldown phase.  The room will be open again in a short while.";
		mes " ";
		set $@MS2MNTM,(((getnpctimer(0,"Mine2Control") / 2000) / 60) %60);
		set $@MS2SETM,((getnpctimer(0,"Mine2Control") / 2000) % 60);
		if ($@MS2SETM == 0 ) goto M_NewMin2;
		if ($@MS2SETM >= 51 ) goto M_Addzero2;
		mes "[Time remaining: " + ($@MS2MNTM) + ":" + (60-$@MS2SETM) + "]"; // Counts down, this is the base timer
		goto M_NotReady2;
	M_NewMin2:
		mes "[Time remaining: " + (1-$@MS2MNTM) + ":00]"; // Keeps the second from starting at 60
		goto M_NotReady2;
	M_Addzero2:
		mes "[Time remaining: " + ($@MS2MNTM) + ":0" + (60-$@MS2SETM) + "]"; // Adds a 0 infront of 1-9
		goto M_NotReady2;
	M_NotReady2:
		next;
		if ($@MS2Lose == 1) goto M_NotReady4;
		if (@MSpt > 0) goto M_NotReady3;
	M_NotReady4:
		if (getgmlevel() > 79) menu "Wait in room.",M_Wait,"Control Panel",M_Control,"Leave Room",M_Exit;
		if (getgmlevel() < 80) menu "Wait in room.",M_Wait,"Leave Room",M_Exit;
	M_NotReady3:
		if (getgmlevel() > 79) menu "Wait in room.",M_Wait,"Control Panel",M_Control,"Cash in",M_Cashin;
		if (getgmlevel() < 80) menu "Wait in room.",M_Wait,"Cash in",M_Cashin;
	M_Cashin:
		mes "[Room Controller]";
		mes "Alright.... lets see how you did.";
		mes " ";
		mes " ";
		mes " ";
		mes "Total Points : "+@MSpt;
		if ($MS2RewType == 0) mes "Kafra Points Earned : "+(((@MSpt*3)+($@MS2Amount*$@MS2Amount))/$MS2Reward)+" KP";
		if ($MS2RewType == 1) mes "Zeny Earned : "+(((@MSpt*3)+($@MS2Amount*$@MS2Amount)*50)/10/$MS2Reward)+"z";
		next;
		mes "[Room Controller]";
		mes "Thank you for playing.";
		if ($MS2RewType == 0) set RESRVPTS,RESRVPTS + (((@MSpt*3)+($@MS2Amount*$@MS2Amount))/$MS2Reward);
		if ($MS2RewType == 1) set Zeny,Zeny + (((@MSpt*3)+($@MS2Amount*$@MS2Amount)*50)/10/$MS2Reward);
		if ($MS2RewType == 0) dispbottom "[You have "+RESRVPTS+" Kafra Reserve Points]";
		set @MSpt,0;
		next;
		mes "[Room Controller]";
		mes "Do you wish to stay here and wait for the room to become available, or return to the station?";
		next;
		menu "Wait in room.",M_Wait,"Leave Room",M_Exit;
	L_Timer:
		set $@MS2CD,1;
		setnpctimer 0; //safeguard
		StartNPCTimer "Mine2Control";
		set $@MS2On,1;
		set $@MS2Title$,"- Game in Progress";
		mapannounce "minesweep2",$@MS2Amount+" mines have been planted! You have a 5 minute time limit!",1;
		set $@MS2Count,1;
		cleararray $@MS2State[0],0,82;
		cleararray $@MS2Mines[0],0,82;
		cleararray $@MS2Field[0],0,82;
		goto L_Start;
	OnTimer1000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[10]",1;
		end;
	OnTimer2000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[9]",1;
		end;
	OnTimer3000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[8]",1;
		end;
	OnTimer4000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[7]",1;
		end;
	OnTimer5000:
		if ($@MS2Ready == 1 && $@MS2Lose == 0) mapannounce "minesweep2","The game is over, please redeem your earned points by talking to the Room Controller.",1;
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[6]",1;
		end;
	OnTimer6000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[5]",1;
		end;
	OnTimer7000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[4]",1;
		end;
	OnTimer8000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[3]",1;
		end;
	OnTimer9000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[2]",1;
		end;
	OnTimer10000:
		if ($@MS2Count == 0) end;
		mapannounce "minesweep2","[1]",1;
		areawarp "minesweep2",1,1,400,400,"minesweep2",144,56;
		end;
	OnTimer11000:
		if ($@MS2Count == 0) end;
		emotion 27;
		specialeffect 267;
		specialeffect 267;
		specialeffect 267;
		specialeffect 267;
		specialeffect 267;
		mapannounce "minesweep2","[GO!]",1;
		set $@MS2CD,0;
		set $@MS2Count,0;
		set $@MS2CYCLE,0;
		set $@MS2Total,0;
		setnpctimer 0;
		goto L_TurnOn;
	OnTimer30000:
		if ($@MS2Ready == 1 && $@MS2Lose == 0) mapannounce "minesweep2","Please redeem your points with the Room Controller, you will be returned to the station automatically in one minute.",1;
		if ($@MS2Lose == 1) mapannounce "minesweep2","The game is over, you will be returned to the station automatically in thirty seconds.",1;
		end;
	OnTimer40000:
		if ($@MS2Ready == 1 && $@MS2Lose == 0) mapannounce "minesweep2","Please redeem your points with the Room Controller, you will be returned to the station automatically in twenty seconds.",1;
		if ($@MS2Lose == 1) mapannounce "minesweep2","You will be returned to the station automatically in twenty seconds.",1;
		end;
	OnTimer50000:
		if ($@MS2Ready == 1 && $@MS2Lose == 0) mapannounce "minesweep2","Please redeem your points with the Room Controller, you will be returned to the station automatically in ten seconds.",1;
		if ($@MS2Lose == 1) mapannounce "minesweep2","You will be returned to the station automatically in ten seconds.",1;
		end;
	OnTimer55000:
		if ($@MS2Ready == 1 && $@MS2Lose == 0) mapannounce "minesweep2","Please redeem your points with the Room Controller, you will be returned to the station automatically in five seconds.",1;
		if ($@MS2Lose == 1) mapannounce "minesweep2","You will be returned to the station automatically in five seconds.",1;
		end;
	OnTimer56000:
		if ($@MS2Ready == 1) mapannounce "minesweep2","Four!",1;
		end;
	OnTimer57000:
		if ($@MS2Ready == 1) mapannounce "minesweep2","Three!",1;
		end;
	OnTimer58000:
		if ($@MS2Ready == 1) mapannounce "minesweep2","Two!",1;
		end;
	OnTimer59000:
		if ($@MS2Ready == 1) mapannounce "minesweep2","One!!",1;
		end;
	OnTimer60000:
		if ($MS2AutoRst == 0 && getmapusers("minesweep2") == 0) goto L_GMReset;
		if ($@MS2Ready == 0) mapannounce "minesweep2","Four minutes remaining.",1;
		if ($@MS2Ready == 1) goto L_GMReset;
		//if ($@MS2Ready == 1) goto L_ResetPC;
		end;
	OnTimer90000:
		mapannounce "minesweep2","Three minutes remaining.",1;
		end;
	OnTimer120000:
		if ($MS2AutoRst == 0 && getmapusers("minesweep2") == 0) goto L_GMReset;
		mapannounce "minesweep2","Two minutes remaining.",1;
		end;
	OnTimer180000:
		if ($MS2AutoRst == 0 && getmapusers("minesweep2") == 0) goto L_GMReset;
		if ($@MS2Ready == 0) mapannounce "minesweep2","One minute remaining.",1;
		end;
	OnTimer210000:
		mapannounce "minesweep2","Thirty seconds remaining.",1;
		end;
	OnTimer220000:
		mapannounce "minesweep2","Twenty seconds remaining.",1;
		end;
	OnTimer230000:
		mapannounce "minesweep2","Ten seconds remaining.",1;
		end;
	OnTimer235000:
		mapannounce "minesweep2","Five!",1;
		end;
	OnTimer236000:
		mapannounce "minesweep2","Four!",1;
		end;
	OnTimer237000:
		mapannounce "minesweep2","Three!!",1;
		end;
	OnTimer238000:
		mapannounce "minesweep2","Two!!",1;
		end;
	OnTimer239000:
		mapannounce "minesweep2","One!!!",1;
		end;
	OnTimer240000:
		if ($MS2AutoRst == 0 && getmapusers("minesweep2") == 0) goto L_GMReset;
		mapannounce "minesweep2","You have FAILED!!  Five minutes have elapsed and the game is over, the room will be able to start another game in 3 minutes.  You will be returned to the station automatically in one minute.",1;
		set $@MS2Ready,1;
		set $@MS2Lose,1;
		set $@MS2CYCLE,0;
		set $@MS2Sequence,0;
		setnpctimer 0;
		goto L_TurnOff;
	L_ResetPC:
		set $@MS2On,0;
		set $@MS2Lose,0;
		set $@MS2Title$,"- Room in Cooldown";
		mapannounce "minesweep2","Thank you for playing.",1;
		areawarp "minesweep2",1,1,400,400,"pvp_m_room",51,38;
		end;
	L_Reset:
		set $@MS2Ready,0;
		set $@MS2Title$,"";
		StopNPCTimer "Mine2Control";
		setnpctimer 0;
		mapannounce "minesweep2","This room is now ready to start a game.",1;
		end;
	L_GMReset:
		set $@MS2On,0;
		set $@MS2Lose,0;
		set $@MS2Ready,0;
		set $@MS2Title$,"";
		cleararray $@MS2Mines[0],0,82;
		cleararray $@MS2Field[0],0,82;
		cleararray $@MS2State[0],0,82;
		StopNPCTimer "Mine2Control";
		setnpctimer 0;
		areawarp "minesweep2",1,1,400,400,"pvp_m_room",51,38;
		goto L_TurnOff;
	L_TurnOn:
		if ($@MS2CYCLE == 81 && $@MS2Debug == 1) debugmes "81 Tiles loaded into grid";
		if ($@MS2CYCLE == 81) goto L_StopCycle;
		set $@MS2CYCLE,$@MS2CYCLE + 1;
		enablenpc "Tile2_"+$@MS2CYCLE+"";
		setnpcdisplay "Tile2_"+$@MS2CYCLE," ",1113;
		donpcevent "Tile2_"+$@MS2CYCLE+"::OnFlip";
		goto L_TurnOn;
	L_TurnOff:
		if ($@MS2CYCLE == 81 && $@MS2Debug == 1) debugmes "81 Tiles removed from grid";
		if ($@MS2CYCLE == 81) goto L_StopCycle;
		set $@MS2CYCLE,$@MS2CYCLE + 1;
		donpcevent "Tile2_"+$@MS2CYCLE+"::OnFlip";
		disablenpc "Tile2_"+$@MS2CYCLE+"";
		goto L_TurnOff;
	L_StopCycle:
		cleararray $@MS2Mines[0],0,82;
		cleararray $@MS2State[0],0,82;
		set $@MS2CYCLE,0;
		end;
//---GM Control Panel----------------------------------------------------------------------------------
	M_Control:
		next;
		mes "[Room Controller]";
		mes "What would you like to do?";
		next;
		if (getgmlevel() < 99 && @MS2On == 1) menu "Change Auto Reset",M_AutoReset,"Change Settings",-,"Change Reward",M_Reward,"Reset Room",M_RmReset,"Return to Menu",M_Menu;
		if (getgmlevel() < 99 && @MS2Lose == 1 || $@MS2Ready == 1) menu "Change Auto Reset",M_AutoReset,"Change Settings",-,"Change Reward",M_Reward,"Reset Room",M_RmReset,"Return to Menu",M_Menu;
		if (getgmlevel() < 99) menu "Change Auto Reset",M_AutoReset,"Change Settings",-,"Change Reward",M_Reward,"Reset Room",M_RmReset,"Return to Menu",M_Menu;
		if (getgmlevel() == 99 && @MS2On == 1) menu "Change Auto Reset",M_AutoReset,"Change Settings",-,"Change Reward",M_Reward,"Reset Room",M_RmReset,"Return to Menu",M_Menu,"Console Debug",M_Debug;
		if (getgmlevel() == 99 && @MS2Lose == 1 || $@MS2Ready == 1) menu "Change Auto Reset",M_AutoReset,"Change Settings",-,"Change Reward",M_Reward,"Reset Room",M_RmReset,"Return to Menu",M_Menu,"Console Debug",M_Debug;
		if (getgmlevel() == 99) menu "Change Auto Reset",M_AutoReset,"Change Settings",-,"Change Reward",M_Reward,"Reset Room",M_RmReset,"Return to Menu",M_Menu,"Console Debug",M_Debug;
	M_Settings:
		mes "[Room Controller]";
		mes "Please select a setting to alter.";
		next;
		menu "Number Display",-,"Change Boom",M_Boom,"Set Min/Max Mines",M_MinMax,"Set Pain",M_Pain,"Change Sequence Cap",M_Sequence,"Reset Room",M_RmReset,"Return",M_Control;
		mes "[Room Controller]";
		mes "This changes the number display.";
		mes "0 = Display Waiting Room, NPC has no name";
		mes "1 = NPC name displays number, no waiting room";
		mes "2 = Display Waiting Room, NPC's name displays the number";
		next;
	L_Input:
		input $MS2Window;
		next;
		if ($MS2Window < 0 || $MS2Window > 2) message strcharinfo(0),"Number must be 0, 1, or 2.";
		if ($MS2Window < 0 || $MS2Window > 2) goto L_Input;
		mes "[Room Controller]";
		mes "Setting changed to "+$MS2Window+".";
		next;
		goto M_Control;
	M_Sequence:
		mes "[Room Controller]";
		mes "This controls how much the reaction will fission, or how many chain reactions can fire one after another.  The higher the reaction number is, the more points players will be able to gain from empty tiles.  This feature is pointless on minefields with a high number of mines, as there are no empty tiles.";
		next;
		mes "[Room Controller]";
		mes "The setting cannot be higher then 15, or lower then 2.";
		mes " ";
		mes " ";
		mes "Current setting : "+$MS2Fission+".";
		next;
	L_Sequence:
		input $MS2Fission;
		next;
		if ($MS2Fission < 2 || $MS2Fission > 15) message strcharinfo(0),"Number must be between 2 and 15!";
		if ($MS2Fission < 2 || $MS2Fission > 15) goto L_Sequence;
		mes "[Room Controller]";
		mes "Thank you, the setting has been changed to "+$MS2Fission+".";
		next;
		goto M_Control;
	M_Boom:
		mes "[Room Controller]";
		if ($MS2Boom == 0) mes "The chain explosion on a game over is currently on.  Turn off?";
		if (($MS2Boom == 0) && select("Yes","No") == 1) set $MS2Boom,1;
		if ($MS2Boom == 1) mes "The chain explosion on a game over is currently off.  Turn on?";
		if (($MS2Boom == 1) && select("Yes","No") == 1) set $MS2Boom,0;
		next;
		goto M_Control;
	M_MinMax:
		mes "[Room Controller]";
		mes "Here you may set the minimum, and maximum, limitations of the mines players can designate per game.  Suggested range is 8-25 mines.";
		next;
		mes "[Room Controller]";
		mes "The minimum cannot be lower then 5, or higher then 60.";
		mes " ";
		mes "Please input the Minimum limit.";
		next;
	L_Minimum:
		input $MS2Minimum;
		next;
		if ($MS2Minimum < 5 || $MS2Minimum > 60) message strcharinfo(0),"Number must be between 5 and 60!";
		if ($MS2Minimum < 5 || $MS2Minimum > 60) goto L_Minimum;
		mes "[Room Controller]";
		mes "The maximum cannot be lower then 15, or higher then 75.";
		mes " ";
		mes "Please input the Maximum limit.";
		next;
	L_Maximum:
		input $MS2Maximum;
		next;
		if ($MS2Maximum < 15 || $MS2Maximum > 75) message strcharinfo(0),"Number must be between 15 and 75!";
		if ($MS2Maximum < 15 || $MS2Maximum > 75) goto L_Maximum;
		mes "[Room Controller]";
		mes "The mine range is now "+$MS2Minimum+" to "+$MS2Maximum+" mines.";
		next;
		goto M_Control;
	M_Pain:
		mes "[Room Controller]";
		mes "This controls whether or not to damage the player who clicks the losing mine, and how much.";
		next;
		if ($MS2Hurts == 2) menu "Turn Off",M_PainOff,"Change to Percent",M_PainPercent,"Change damage",-;
		if ($MS2Hurts == 1) menu "Turn Off",M_PainOff,"Change to Digits",M_PainDigit,"Change damage",-;
		if ($MS2Hurts == 0) menu "Turn On",M_PainOn;
	M_PainPercent:
		mes "[Room Controller]";
		mes "This damage is percentile based.  Set the number of hp damage between -1% and -100%.  (Input the number, not the - sign)";
		mes " ";
		if ($MS2Hurts == 1) mes "Current setting is "+$MS2Ow+"%.";
		next;
	L_Pain1Input:
		input $MS2Ow;
		next;
		if ($MS2Ow < 1 || $MS2Ow > 100) message strcharinfo(0),"Number must be between 1 and 100!";
		if ($MS2Ow < 1 || $MS2Ow > 100) goto L_Pain1Input;
		set $MS2Ow,($MS2Ow*-1);
		set $MS2Hurts,1;
		goto M_Control;
	M_PainDigit:
		mes "[Room Controller]";
		mes "This damage is number based.  Set the number of hp damage between -1 and -999999.  (Input the number, not the - sign)";
		mes " ";
		if ($MS2Hurts == 2) mes "Current setting is "+$MS2Ow+".";
		next;
	L_Pain2Input:
		input $MS2Ow;
		next;
		if ($MS2Ow < 1 || $MS2Ow > 999999) message strcharinfo(0),"Number must be between 1 and 999999!";
		if ($MS2Ow < 1 || $MS2Ow > 999999) goto L_Pain2Input;
		set $MS2Hurts,2;
		set $MS2Ow,($MS2Ow*-1);
		goto M_Control;
	M_PainOn:
		set $MS2Hurts,1;
		set $MS2Ow,-75;
		mes "[Room Controller]";
		mes "Players will now be damaged if they click on a mine.  Damage type is defaulted to Percent and Damage is set to -75%.";
		goto M_Control;
	M_PainOff:
		set $MS2Hurts,0;
		set $MS2Ow,1;
		mes "[Room Controller]";
		mes "Players will no longer be harmed if they click on a mine, and damage is set to 1.";
		goto M_Control;
	M_Debug:
		mes "[Room Controller]";
		mes "Beep!";
		next;
		mes "While on, this will cause the minigame to return feedback to the map-server.exe console window.  Use this to check for minefield abnormalities, excessive cycles, or other odd behavior.";
		next;
		mes "^FF0000ONLY USE THIS IF YOU KNOW EXACTLY WHAT YOU ARE DOING.!!!!!!!!!!!!!!!!!!!!!!!!!!^000000";
		mes "^FF0000ONLY USE THIS IF YOU KNOW EXACTLY WHAT YOU ARE DOING.!!!!!!!!!!!!!!!!!!!!!!!!!!^000000";
		mes "^FF0000ONLY USE THIS IF YOU KNOW EXACTLY WHAT YOU ARE DOING.!!!!!!!!!!!!!!!!!!!!!!!!!!^000000";
		mes "^FF0000ONLY USE THIS IF YOU KNOW EXACTLY WHAT YOU ARE DOING.!!!!!!!!!!!!!!!!!!!!!!!!!!^000000";
		next;
		mes "This is a temporary server variable, and will reset to OFF if the server is reset!  Please ONLY use this if you suspect a problem with the script and wish to observe the script move to uncover the suspected problem.";
		next;
		if ($@MS2Debug == 0) menu "TURN ON DEBUG",L_DebugOn,"Cancel",-;
		if ($@MS2Debug == 1) menu "TURN OFF DEBUG",L_DebugOff,"Cancel",-;
		goto M_Control;
	L_DebugOn:
		set $@MS2Debug,1;
		message strcharinfo(0),"DEBUG IS NOW -ON-";
		debugmes "MINESWEEPER DEBUG HAS BEEN TURNED ON.";
		next;
		goto M_Control;
	L_DebugOff:
		set $@MS2Debug,0;
		message strcharinfo(0),"DEBUG IS NOW -OFF-";
		debugmes "MINESWEEPER DEBUG HAS BEEN TURNED OFF.";
		next;
		goto M_Control;
	M_AutoReset:
		mes "[Room Controller]";
		if ($MS2AutoRst == 0) mes "The room is set to automatically reset if the room is empty.  The room checks this once every minute while the timer is active.  Do you wish to turn this feature off?";
		if ($MS2AutoRst == 1) mes "The room is set to wait the full 20 minutes before reseting, even if the room is empty.  Do you wish to turn the automatic reset feature on?";
		next;
		if ($MS2AutoRst == 0) menu "Yes",M_AutOff,"No",M_Control;
		if ($MS2AutoRst == 1) menu "Yes",-,"No",M_Control;
		set $MS2AutoRst,0;
		goto M_Control;
	M_AutOff:
		set $MS2AutoRst,1;
		goto M_Control;
	M_Reward:
		mes "[Room Controller]";
		mes "How would you like to setup the reward?";
		next;
		menu "Change Modifier",-,"Change Type",M_RewType,"Return",M_Control;
		mes "[Room Controller]";
		mes "This modifier controls how the player's points are divided when they complete the game.";
		next;
		mes "[Room Controller]";
		mes "The player's points is divided by this modifier.  If the reward type is set to zeny, then a multiplier is added to the equation to give reasonable amounts of zeny.";
		next;
		mes "[Room Controller]";
		mes "The variable cannot be 0, and cannot be more then 10.";
		mes "Current Setting is ["+$MS2Reward+"]";
		next;
		input $MS2Reward;
		next;
		if ($MS2Reward == 0 || $MS2Reward > 10) goto M_RewInError;
		mes "[Room Controller]";
		mes "The reward modifier has been set to "+$MS2Reward+".";
		next;
		goto M_Control;
	M_RewType:
		mes "[Room Controller]";	
		mes "Do you want the players do receive a KP (Kafra Point) reward, or a Zeny reward?";
		if ($MS2RewType == 1) mes "[Reward currently set to Zeny]";
		if ($MS2RewType == 0) mes "[Reward currently set to Kafra Points]";
		next;
		menu "Zeny",-,"Kafra Point",M_RewKP;
		set $MS2RewType,1;
	M_RewInf:
		mes "[Room Controller]";
		if ($MS2RewType == 1) mes "Thank you, the reward is now set to Zeny.";
		if ($MS2RewType == 0) mes "Thank you, the reward is now set to Kafra Points.";
		goto M_Control;
	M_RewKP:
		set $MS2RewType,0;
		goto M_RewInf;
	M_RmReset:
		mes "[Room Controller]";
		mes "Resetting room...";
		goto L_GMReset;
//---Events----------------------------------------------------------------------------------
	OnWin:
		set $@MS2Ready,1;
		mapannounce "minesweep2","Victory!  Congratulations!",1;
		setnpctimer 0;
		goto L_TurnOff;
	OnBoom:
		setnpctimer 0;
		end;
	OnInit:
		if ($MS2Fission == 0) set $MS2Fission,8;
		if ($MS2Ow == 0) set $MS2Ow,-75;
		if ($MS2Minimum == 0 && $MS2Hurts == 0) set $MS2Hurts,1;
		if ($MS2Minimum == 0) set $MS2Window,1;
		if ($MS2Minimum == 0) set $MS2Minimum,8;
		if ($MS2Maximum == 0) set $MS2Maximum,25;
		if ($MS2Reward == 0) set $MS2Reward,2;
		setnpcdisplay "Mine2Control","Room Controller",770;
		L_Disable:
			disablenpc "Tile2_"+$@MS2CYCLE+"";
			if ($@MS2CYCLE == 81) goto L_DisEnd;
			set $@MS2CYCLE,$@MS2CYCLE + 1;
			goto L_Disable;
		L_DisEnd:
			set $@MS2CYCLE,0;
			end;
//---Mine Generator----------------------------------------------------------------------------------
L_Start:
	set $@MS2Minetick,0;
	set $@MS2CYCLE,0;
	set $@MS2Tile,0;
L_MTrigger:
	if ($@MS2Minetick >= $@MS2Amount) goto L_MStop;
	set $@MS2CYCLE,$@MS2CYCLE + 1;
	set $@MS2Tile,rand(1,81);
//	if ($@MS2Debug == 1) debugmes "[Mine Generation Tick: "+$@MS2CYCLE+"]";
	if ($@MS2Mines[$@MS2Tile] == 0) goto L_MTick;
	goto L_MTrigger;
L_MTick:
	set $@MS2Mines[$@MS2Tile],1;
	set $@MS2Minetick,$@MS2Minetick + 1;
	goto L_MTrigger;
L_MStop:
	//Some of these are always on to detect if there are abnormalities in the mine generation revolver
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 1900) debugmes "[!WARNING! DANGEROUS MINEFIELD ANOMOLY DETECTED!! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 1900) debugmes "[!WARNING! DANGEROUS MINEFIELD ANOMOLY DETECTED!! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 1900) debugmes "[!WARNING! DANGEROUS MINEFIELD ANOMOLY DETECTED!! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 1400 && $@MS2CYCLE < 1900) debugmes "[!WARNING! ABNORMAL MINEFIELD CYCLE! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 1400 && $@MS2CYCLE < 1900) debugmes "[!WARNING! ABNORMAL MINEFIELD CYCLE! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 700 && $@MS2CYCLE < 1400) debugmes "[!WARNING! LARGE MINEFIELD CYCLE! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 0 && $@MS2CYCLE >= 250 && $@MS2CYCLE < 700) debugmes "[!WARNING! BIG MINEFIELD CYCLE! - "+$@MS2CYCLE+" cycles processed!]";
	if ($@MS2Debug == 1) debugmes ".===============================.";
	if ($@MS2Debug == 1) debugmes "|  Minesweeper Room 1 Readout   |";
	if ($@MS2Debug == 1) debugmes "|       [mine locations]        |";
	if ($@MS2Debug == 1) debugmes "|===============================|";
	if ($@MS2Debug == 1 && $@MS2CYCLE > 1499) debugmes "| !WARNING! DANGEROUSLY HIGH    |";
	if ($@MS2Debug == 1 && $@MS2CYCLE > 1499) debugmes "|    CYCLE TICK!! "+$@MS2CYCLE+"!!       |";
	if ($@MS2Debug == 1 && $@MS2CYCLE < 10) debugmes "| Field generated in 00"+$@MS2CYCLE+" cycles.|";
	if ($@MS2Debug == 1 && $@MS2CYCLE < 100 && $@MS2CYCLE > 99) debugmes "| Field generated in 0"+$@MS2CYCLE+" cycles.|";
	if ($@MS2Debug == 1 && $@MS2CYCLE > 99 && $@MS2CYCLE < 1000) debugmes "| Field generated in "+$@MS2CYCLE+" cycles.|";
	if ($@MS2Debug == 1 && $@MS2CYCLE > 999 && $@MS2CYCLE < 1500) debugmes "| Field generated in "+$@MS2CYCLE+" cycles|";
	if ($@MS2Debug == 1 && $@MS2Minetick < 10) debugmes "| Field should contain 0"+$@MS2Minetick+" mines.|";
	if ($@MS2Debug == 1 && $@MS2Minetick > 9) debugmes "| Field should contain "+$@MS2Minetick+" mines.|";
	if ($@MS2Debug == 1) debugmes "|-------------------------------|";
	if ($@MS2Debug == 1) debugmes "| 9 ["+$@MS2Mines[73]+"]["+$@MS2Mines[74]+"]["+$@MS2Mines[75]+"]["+$@MS2Mines[76]+"]["+$@MS2Mines[77]+"]["+$@MS2Mines[78]+"]["+$@MS2Mines[79]+"]["+$@MS2Mines[80]+"]["+$@MS2Mines[81]+"] |";
	if ($@MS2Debug == 1) debugmes "| 8 ["+$@MS2Mines[64]+"]["+$@MS2Mines[65]+"]["+$@MS2Mines[66]+"]["+$@MS2Mines[67]+"]["+$@MS2Mines[68]+"]["+$@MS2Mines[69]+"]["+$@MS2Mines[70]+"]["+$@MS2Mines[71]+"]["+$@MS2Mines[72]+"] |";
	if ($@MS2Debug == 1) debugmes "| 7 ["+$@MS2Mines[55]+"]["+$@MS2Mines[56]+"]["+$@MS2Mines[57]+"]["+$@MS2Mines[58]+"]["+$@MS2Mines[59]+"]["+$@MS2Mines[60]+"]["+$@MS2Mines[61]+"]["+$@MS2Mines[62]+"]["+$@MS2Mines[63]+"] |";
	if ($@MS2Debug == 1) debugmes "| 6 ["+$@MS2Mines[46]+"]["+$@MS2Mines[47]+"]["+$@MS2Mines[48]+"]["+$@MS2Mines[49]+"]["+$@MS2Mines[50]+"]["+$@MS2Mines[51]+"]["+$@MS2Mines[52]+"]["+$@MS2Mines[53]+"]["+$@MS2Mines[54]+"] |";
	if ($@MS2Debug == 1) debugmes "| 5 ["+$@MS2Mines[37]+"]["+$@MS2Mines[38]+"]["+$@MS2Mines[39]+"]["+$@MS2Mines[40]+"]["+$@MS2Mines[41]+"]["+$@MS2Mines[42]+"]["+$@MS2Mines[43]+"]["+$@MS2Mines[44]+"]["+$@MS2Mines[45]+"] |";
	if ($@MS2Debug == 1) debugmes "| 4 ["+$@MS2Mines[28]+"]["+$@MS2Mines[29]+"]["+$@MS2Mines[30]+"]["+$@MS2Mines[31]+"]["+$@MS2Mines[32]+"]["+$@MS2Mines[33]+"]["+$@MS2Mines[34]+"]["+$@MS2Mines[35]+"]["+$@MS2Mines[36]+"] |";
	if ($@MS2Debug == 1) debugmes "| 3 ["+$@MS2Mines[19]+"]["+$@MS2Mines[20]+"]["+$@MS2Mines[21]+"]["+$@MS2Mines[22]+"]["+$@MS2Mines[23]+"]["+$@MS2Mines[24]+"]["+$@MS2Mines[25]+"]["+$@MS2Mines[26]+"]["+$@MS2Mines[27]+"] |";
	if ($@MS2Debug == 1) debugmes "| 2 ["+$@MS2Mines[10]+"]["+$@MS2Mines[11]+"]["+$@MS2Mines[12]+"]["+$@MS2Mines[13]+"]["+$@MS2Mines[14]+"]["+$@MS2Mines[15]+"]["+$@MS2Mines[16]+"]["+$@MS2Mines[17]+"]["+$@MS2Mines[18]+"] |";
	if ($@MS2Debug == 1) debugmes "| 1 ["+$@MS2Mines[1]+"]["+$@MS2Mines[2]+"]["+$@MS2Mines[3]+"]["+$@MS2Mines[4]+"]["+$@MS2Mines[5]+"]["+$@MS2Mines[6]+"]["+$@MS2Mines[7]+"]["+$@MS2Mines[8]+"]["+$@MS2Mines[9]+"] |";
	if ($@MS2Debug == 1) debugmes "|    1  2  3  4  5  6  7  8  9  |";
	if ($@MS2Debug == 1) debugmes "|===============================|";
	if ($@MS2Debug == 1) debugmes "|  1 = Mine        0 = Nothing  |";
	if ($@MS2Debug == 1) debugmes "`==============================='";
	set $@MS2Minetick,0;
	set $@MS2CYCLE,0;
	set $@MS2Tile,0;
	cleararray $@MS2Field[0],0,82;
	set $@MS2C,1;
	set $@MS2NW,0;
	set $@MS2W,0;
	set $@MS2SW,0;
	set $@MS2S,0;
	set $@MS2SE,0;
	set $@MS2E,0;
	set $@MS2N,0;
	set $@MS2NW,0;
	set $@MS2N,0;
L_FTrigger:
	if ($@MS2CYCLE == 81) goto L_FStop;
	set $@MS2CYCLE,$@MS2CYCLE + 1;
	set $@MS2C,$@MS2CYCLE;
//	if ($@MS2Debug == 1) debugmes "[Field Generation Tick: "+$@MS2CYCLE+"]";
	if ($@MS2Mines[$@MS2CYCLE] == 1) goto L_FSetup;
	goto L_FTrigger;
L_FSetup:
	set $@MS2NW,0;
	set $@MS2W,0;
	set $@MS2SW,0;
	set $@MS2S,0;
	set $@MS2SE,0;
	set $@MS2E,0;
	set $@MS2N,0;
	set $@MS2NW,0;
	set $@MS2N,0;
	set $@MS2NW,$@MS2C + 8;
	set $@MS2W,$@MS2C - 1;
	set $@MS2SW,$@MS2C - 10;
	set $@MS2S,$@MS2C - 9;
	set $@MS2SE,$@MS2C - 8;
	set $@MS2E,$@MS2C + 1;
	set $@MS2NE,$@MS2C + 10;
	set $@MS2N,$@MS2C + 9;
	if ($@MS2C == 1 || $@MS2C == 10 || $@MS2C == 19 || $@MS2C == 28 || $@MS2C == 37 || $@MS2C == 46 || $@MS2C == 55 || $@MS2C == 64 || $@MS2C > 72) set $@MS2NW,0;
	if ($@MS2C == 1 || $@MS2C == 10 || $@MS2C == 19 || $@MS2C == 28 || $@MS2C == 37 || $@MS2C == 46 || $@MS2C == 55 || $@MS2C == 64 || $@MS2C == 73) set $@MS2W,0;
	if ($@MS2C < 11 || $@MS2C == 19 || $@MS2C == 28 || $@MS2C == 37 || $@MS2C == 46 || $@MS2C == 55 || $@MS2C == 64 || $@MS2C == 73) set $@MS2SW,0;
	if ($@MS2C < 10) set $@MS2S,0;
	if ($@MS2C < 10 || $@MS2C == 18 || $@MS2C == 27 || $@MS2C == 36 || $@MS2C == 45 || $@MS2C == 54 || $@MS2C == 63 || $@MS2C == 72 || $@MS2C == 81) set $@MS2SE,0;
	if ($@MS2C == 9 || $@MS2C == 18 || $@MS2C == 27 || $@MS2C == 36 || $@MS2C == 45 || $@MS2C == 54 || $@MS2C == 63 || $@MS2C == 72 || $@MS2C == 81) set $@MS2E,0;
	if ($@MS2C == 9 || $@MS2C == 18 || $@MS2C == 27 || $@MS2C == 36 || $@MS2C == 45 || $@MS2C == 54 || $@MS2C == 63 || $@MS2C > 71) set $@MS2NE,0;
	if ($@MS2C > 72) set $@MS2N,0;
	set $@MS2Field[$@MS2C],9;
	if ($@MS2NW != 0) set $@MS2Field[$@MS2NW],$@MS2Field[$@MS2NW] + 1;
	if ($@MS2W != 0) set $@MS2Field[$@MS2W],$@MS2Field[$@MS2W] + 1;
	if ($@MS2SW != 0) set $@MS2Field[$@MS2SW],$@MS2Field[$@MS2SW] + 1;
	if ($@MS2S != 0) set $@MS2Field[$@MS2S],$@MS2Field[$@MS2S] + 1;
	if ($@MS2SE != 0) set $@MS2Field[$@MS2SE],$@MS2Field[$@MS2SE] + 1;
	if ($@MS2E != 0) set $@MS2Field[$@MS2E],$@MS2Field[$@MS2E] + 1;
	if ($@MS2NE != 0) set $@MS2Field[$@MS2NE],$@MS2Field[$@MS2NE] + 1;
	if ($@MS2N != 0) set $@MS2Field[$@MS2N],$@MS2Field[$@MS2N] + 1;
	if ($@MS2Field[$@MS2NW] > 9) set $@MS2Field[$@MS2NW],9;
	if ($@MS2Field[$@MS2W] > 9) set $@MS2Field[$@MS2W],9;
	if ($@MS2Field[$@MS2SW] > 9) set $@MS2Field[$@MS2SW],9;
	if ($@MS2Field[$@MS2S] > 9) set $@MS2Field[$@MS2S],9;
	if ($@MS2Field[$@MS2SE] > 9) set $@MS2Field[$@MS2SE],9;
	if ($@MS2Field[$@MS2E] > 9) set $@MS2Field[$@MS2E],9;
	if ($@MS2Field[$@MS2NE] > 9) set $@MS2Field[$@MS2NE],9;
	if ($@MS2Field[$@MS2N] > 9) set $@MS2Field[$@MS2N],9;
	set $@MS2C,0;
	goto L_FTrigger;
L_FCheck:
	if ($@MS2CYCLE == 81) goto L_FResume;
	set $@MS2CYCLE,$@MS2CYCLE + 1;
	if ($@MS2Field[$@MS2CYCLE] < 9 && $@MS2Field[$@MS2CYCLE] > 0) set $@MS2FCheck,$@MS2FCheck + $@MS2Field[$@MS2CYCLE];
	goto L_FCheck;
L_FStop:
	set $@MS2CYCLE,0;
	set $@MS2FCheck,0;
	if ($@MS2Debug == 1) goto L_FCheck;
L_FResume:
	set $@MS2C,0;
	set $@MS2NW,0;
	set $@MS2W,0;
	set $@MS2SW,0;
	set $@MS2S,0;
	set $@MS2SE,0;
	set $@MS2E,0;
	set $@MS2NE,0;
	set $@MS2N,0;
	cleararray $@MS2Mines[0],0,82;
	if ($@MS2Debug == 1) debugmes ".===============================.";
	if ($@MS2Debug == 1) debugmes "|  Minesweeper Room 1 Readout   |";
	if ($@MS2Debug == 1) debugmes "|      [point value map]        |";
	if ($@MS2Debug == 1) debugmes "|===============================|";
	if ($@MS2Debug == 1 && $@MS2FCheck < 10) debugmes "| Total Point Value : "+$@MS2FCheck+" pts     |";
	if ($@MS2Debug == 1 && $@MS2FCheck < 100 && $@MS2FCheck > 9) debugmes "| Total Point Value : "+$@MS2FCheck+" pts    |";
	if ($@MS2Debug == 1 && $@MS2FCheck < 1000 && $@MS2FCheck > 99) debugmes "| Total Point Value : "+$@MS2FCheck+" pts   |";
	if ($@MS2Debug == 1 && $@MS2FCheck < 10000 && $@MS2FCheck > 999) debugmes "| Total Point Value : "+$@MS2FCheck+" pts  |";
	if ($@MS2Debug == 1 && $@MS2Amount < 10) debugmes "| Field should contain 0"+$@MS2Amount+" mines.|";
	if ($@MS2Debug == 1 && $@MS2Amount > 9) debugmes "| Field should contain "+$@MS2Amount+" mines.|";
	if ($@MS2Debug == 1) debugmes "|-------------------------------|";
	if ($@MS2Debug == 1) debugmes "| 9 ["+$@MS2Field[73]+"]["+$@MS2Field[74]+"]["+$@MS2Field[75]+"]["+$@MS2Field[76]+"]["+$@MS2Field[77]+"]["+$@MS2Field[78]+"]["+$@MS2Field[79]+"]["+$@MS2Field[80]+"]["+$@MS2Field[81]+"] |";
	if ($@MS2Debug == 1) debugmes "| 8 ["+$@MS2Field[64]+"]["+$@MS2Field[65]+"]["+$@MS2Field[66]+"]["+$@MS2Field[67]+"]["+$@MS2Field[68]+"]["+$@MS2Field[69]+"]["+$@MS2Field[70]+"]["+$@MS2Field[71]+"]["+$@MS2Field[72]+"] |";
	if ($@MS2Debug == 1) debugmes "| 7 ["+$@MS2Field[55]+"]["+$@MS2Field[56]+"]["+$@MS2Field[57]+"]["+$@MS2Field[58]+"]["+$@MS2Field[59]+"]["+$@MS2Field[60]+"]["+$@MS2Field[61]+"]["+$@MS2Field[62]+"]["+$@MS2Field[63]+"] |";
	if ($@MS2Debug == 1) debugmes "| 6 ["+$@MS2Field[46]+"]["+$@MS2Field[47]+"]["+$@MS2Field[48]+"]["+$@MS2Field[49]+"]["+$@MS2Field[50]+"]["+$@MS2Field[51]+"]["+$@MS2Field[52]+"]["+$@MS2Field[53]+"]["+$@MS2Field[54]+"] |";
	if ($@MS2Debug == 1) debugmes "| 5 ["+$@MS2Field[37]+"]["+$@MS2Field[38]+"]["+$@MS2Field[39]+"]["+$@MS2Field[40]+"]["+$@MS2Field[41]+"]["+$@MS2Field[42]+"]["+$@MS2Field[43]+"]["+$@MS2Field[44]+"]["+$@MS2Field[45]+"] |";
	if ($@MS2Debug == 1) debugmes "| 4 ["+$@MS2Field[28]+"]["+$@MS2Field[29]+"]["+$@MS2Field[30]+"]["+$@MS2Field[31]+"]["+$@MS2Field[32]+"]["+$@MS2Field[33]+"]["+$@MS2Field[34]+"]["+$@MS2Field[35]+"]["+$@MS2Field[36]+"] |";
	if ($@MS2Debug == 1) debugmes "| 3 ["+$@MS2Field[19]+"]["+$@MS2Field[20]+"]["+$@MS2Field[21]+"]["+$@MS2Field[22]+"]["+$@MS2Field[23]+"]["+$@MS2Field[24]+"]["+$@MS2Field[25]+"]["+$@MS2Field[26]+"]["+$@MS2Field[27]+"] |";
	if ($@MS2Debug == 1) debugmes "| 2 ["+$@MS2Field[10]+"]["+$@MS2Field[11]+"]["+$@MS2Field[12]+"]["+$@MS2Field[13]+"]["+$@MS2Field[14]+"]["+$@MS2Field[15]+"]["+$@MS2Field[16]+"]["+$@MS2Field[17]+"]["+$@MS2Field[18]+"] |";
	if ($@MS2Debug == 1) debugmes "| 1 ["+$@MS2Field[1]+"]["+$@MS2Field[2]+"]["+$@MS2Field[3]+"]["+$@MS2Field[4]+"]["+$@MS2Field[5]+"]["+$@MS2Field[6]+"]["+$@MS2Field[7]+"]["+$@MS2Field[8]+"]["+$@MS2Field[9]+"] |";
	if ($@MS2Debug == 1) debugmes "|    1  2  3  4  5  6  7  8  9  |";
	if ($@MS2Debug == 1) debugmes "|===============================|";
	if ($@MS2Debug == 1) debugmes "|  9 = Mine        0 = Nothing  |";
	if ($@MS2Debug == 1) debugmes "`==============================='";
	end;
}

//---Chain Reaction Function----------------------------------------------------------------------------------
function	script	F_M2Fission	{
	if ($@MS2Sequence == $MS2Fission) end;
	set $@MS2Total,$@MS2Total + 2;
	if ($@MS2Debug == 1) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+getarg(0);
	set $@MS2Sequence,$@MS2Sequence + 1;
	set $@MS2State[getarg(0)],2;
	set $@MS2Mines[getarg(0)],3;
	set $@MS2NW,0;
	set $@MS2W,0;
	set $@MS2SW,0;
	set $@MS2S,0;
	set $@MS2SE,0;
	set $@MS2E,0;
	set $@MS2N,0;
	set $@MS2NW,0;
	set $@MS2N,0;
	set $@MS2NW,getarg(0) + 8;
	set $@MS2W,getarg(0) - 1;
	set $@MS2SW,getarg(0) - 10;
	set $@MS2S,getarg(0) - 9;
	set $@MS2SE,getarg(0) - 8;
	set $@MS2E,getarg(0) + 1;
	set $@MS2NE,getarg(0) + 10;
	set $@MS2N,getarg(0) + 9;
	if (getarg(0) == 1 || getarg(0) == 10 || getarg(0) == 19 || getarg(0) == 28 || getarg(0) == 37 || getarg(0) == 46 || getarg(0) == 55 || getarg(0) == 64 || getarg(0) > 72) set $@MS2NW,0;
	if (getarg(0) == 1 || getarg(0) == 10 || getarg(0) == 19 || getarg(0) == 28 || getarg(0) == 37 || getarg(0) == 46 || getarg(0) == 55 || getarg(0) == 64 || getarg(0) == 73) set $@MS2W,0;
	if (getarg(0) < 11 || getarg(0) == 19 || getarg(0) == 28 || getarg(0) == 37 || getarg(0) == 46 || getarg(0) == 55 || getarg(0) == 64 || getarg(0) == 73) set $@MS2SW,0;
	if (getarg(0) < 10) set $@MS2S,0;
	if (getarg(0) < 10 || getarg(0) == 18 || getarg(0) == 27 || getarg(0) == 36 || getarg(0) == 45 || getarg(0) == 54 || getarg(0) == 63 || getarg(0) == 72 || getarg(0) == 81) set $@MS2SE,0;
	if (getarg(0) == 9 || getarg(0) == 18 || getarg(0) == 27 || getarg(0) == 36 || getarg(0) == 45 || getarg(0) == 54 || getarg(0) == 63 || getarg(0) == 72 || getarg(0) == 81) set $@MS2E,0;
	if (getarg(0) == 9 || getarg(0) == 18 || getarg(0) == 27 || getarg(0) == 36 || getarg(0) == 45 || getarg(0) == 54 || getarg(0) == 63 || getarg(0) > 71) set $@MS2NE,0;
	if (getarg(0) > 72) set $@MS2N,0;
	if ($@MS2NW != 0 && $@MS2State[$@MS2NW] == 1) set $@MS2Mines[$@MS2NW],3;
	if ($@MS2W != 0 && $@MS2State[$@MS2W] == 1) set $@MS2Mines[$@MS2W],3;
	if ($@MS2SW != 0 && $@MS2State[$@MS2SW] == 1) set $@MS2Mines[$@MS2SW],3;
	if ($@MS2S != 0 && $@MS2State[$@MS2S] == 1) set $@MS2Mines[$@MS2S],3;
	if ($@MS2SE != 0 && $@MS2State[$@MS2SE] == 1) set $@MS2Mines[$@MS2SE],3;
	if ($@MS2E != 0 && $@MS2State[$@MS2E] == 1) set $@MS2Mines[$@MS2E],3;
	if ($@MS2NE != 0 && $@MS2State[$@MS2NE] == 1) set $@MS2Mines[$@MS2NE],3;
	if ($@MS2N != 0 && $@MS2State[$@MS2N] == 1) set $@MS2Mines[$@MS2N],3;
	if ($@MS2NW != 0 && $@MS2Field[$@MS2NW] == 0 && $@MS2Mines[$@MS2NW] == 0) set $@MS2Mines[$@MS2NW],1;
	if ($@MS2W != 0 && $@MS2Field[$@MS2W] == 0 && $@MS2Mines[$@MS2W] == 0) set $@MS2Mines[$@MS2W],1;
	if ($@MS2SW != 0 && $@MS2Field[$@MS2SW] == 0 && $@MS2Mines[$@MS2SW] == 0) set $@MS2Mines[$@MS2SW],1;
	if ($@MS2S != 0 && $@MS2Field[$@MS2S] == 0 && $@MS2Mines[$@MS2S] == 0) set $@MS2Mines[$@MS2S],1;
	if ($@MS2SE != 0 && $@MS2Field[$@MS2SE] == 0 && $@MS2Mines[$@MS2SE] == 0) set $@MS2Mines[$@MS2SE],1;
	if ($@MS2E != 0 && $@MS2Field[$@MS2E] == 0 && $@MS2Mines[$@MS2E] == 0) set $@MS2Mines[$@MS2E],1;
	if ($@MS2NE != 0 && $@MS2Field[$@MS2NE] == 0 && $@MS2Mines[$@MS2NE] == 0) set $@MS2Mines[$@MS2NE],1;
	if ($@MS2N != 0 && $@MS2Field[$@MS2N] == 0 && $@MS2Mines[$@MS2N] == 0) set $@MS2Mines[$@MS2N],1;
	if ($@MS2NW != 0 && $@MS2Field[$@MS2NW] > 0 && $@MS2Field[$@MS2NW] < 9 && $@MS2Mines[$@MS2NW] == 0) set $@MS2Mines[$@MS2NW],2;
	if ($@MS2W != 0 && $@MS2Field[$@MS2W] > 0 && $@MS2Field[$@MS2W] < 9 && $@MS2Mines[$@MS2W] == 0) set $@MS2Mines[$@MS2W],2;
	if ($@MS2SW != 0 && $@MS2Field[$@MS2SW] > 0 && $@MS2Field[$@MS2SW] < 9 && $@MS2Mines[$@MS2SW] == 0) set $@MS2Mines[$@MS2SW],2;
	if ($@MS2S != 0 && $@MS2Field[$@MS2S] > 0 && $@MS2Field[$@MS2S] < 9 && $@MS2Mines[$@MS2S] == 0) set $@MS2Mines[$@MS2S],2;
	if ($@MS2SE != 0 && $@MS2Field[$@MS2SE] > 0 && $@MS2Field[$@MS2SE] < 9 && $@MS2Mines[$@MS2SE] == 0) set $@MS2Mines[$@MS2SE],2;
	if ($@MS2E != 0 && $@MS2Field[$@MS2E] > 0 && $@MS2Field[$@MS2E] < 9 && $@MS2Mines[$@MS2E] == 0) set $@MS2Mines[$@MS2E],2;
	if ($@MS2NE != 0 && $@MS2Field[$@MS2NE] > 0 && $@MS2Field[$@MS2NE] < 9 && $@MS2Mines[$@MS2NE] == 0) set $@MS2Mines[$@MS2NE],2;
	if ($@MS2N != 0 && $@MS2Field[$@MS2N] > 0 && $@MS2Field[$@MS2N] < 9 && $@MS2Mines[$@MS2N] == 0) set $@MS2Mines[$@MS2N],2;
	if ($@MS2NW != 0 && $@MS2Field[$@MS2NW] == 9 && $@MS2Mines[$@MS2NW] == 0) set $@MS2Mines[$@MS2NW],3;
	if ($@MS2W != 0 && $@MS2Field[$@MS2W] == 9 && $@MS2Mines[$@MS2W] == 0) set $@MS2Mines[$@MS2W],3;
	if ($@MS2SW != 0 && $@MS2Field[$@MS2SW] == 9 && $@MS2Mines[$@MS2SW] == 0) set $@MS2Mines[$@MS2SW],3;
	if ($@MS2S != 0 && $@MS2Field[$@MS2S] == 9 && $@MS2Mines[$@MS2S] == 0) set $@MS2Mines[$@MS2S],3;
	if ($@MS2SE != 0 && $@MS2Field[$@MS2SE] == 9 && $@MS2Mines[$@MS2SE] == 0) set $@MS2Mines[$@MS2SE],3;
	if ($@MS2E != 0 && $@MS2Field[$@MS2E] == 9 && $@MS2Mines[$@MS2E] == 0) set $@MS2Mines[$@MS2E],3;
	if ($@MS2NE != 0 && $@MS2Field[$@MS2NE] == 9 && $@MS2Mines[$@MS2NE] == 0) set $@MS2Mines[$@MS2NE],3;
	if ($@MS2N != 0 && $@MS2Field[$@MS2N] == 9 && $@MS2Mines[$@MS2N] == 0) set $@MS2Mines[$@MS2N],3;
	if ($@MS2NW != 0 && $@MS2Mines[$@MS2NW] == 2) donpcevent "Tile2_"+$@MS2NW+"::OnDisplay";
	if ($@MS2W != 0 && $@MS2Mines[$@MS2W] == 2) donpcevent "Tile2_"+$@MS2W+"::OnDisplay";
	if ($@MS2SW != 0 && $@MS2Mines[$@MS2SW] == 2) donpcevent "Tile2_"+$@MS2SW+"::OnDisplay";
	if ($@MS2S != 0 && $@MS2Mines[$@MS2S] == 2) donpcevent "Tile2_"+$@MS2S+"::OnDisplay";
	if ($@MS2SE != 0 && $@MS2Mines[$@MS2SE] == 2) donpcevent "Tile2_"+$@MS2SE+"::OnDisplay";
	if ($@MS2E != 0 && $@MS2Mines[$@MS2E] == 2) donpcevent "Tile2_"+$@MS2E+"::OnDisplay";
	if ($@MS2NE != 0 && $@MS2Mines[$@MS2NE] == 2) donpcevent "Tile2_"+$@MS2NE+"::OnDisplay";
	if ($@MS2N != 0 && $@MS2Mines[$@MS2N] == 2) donpcevent "Tile2_"+$@MS2N+"::OnDisplay";
	attachrid(getcharid(3,$@MS2NAME$));
	if ($@MS2NW != 0 && $@MS2Mines[$@MS2NW] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2NW];
	if ($@MS2W != 0 && $@MS2Mines[$@MS2W] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2W];
	if ($@MS2SW != 0 && $@MS2Mines[$@MS2SW] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2SW];
	if ($@MS2S != 0 && $@MS2Mines[$@MS2S] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2S];
	if ($@MS2SE != 0 && $@MS2Mines[$@MS2SE] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2SE];
	if ($@MS2E != 0 && $@MS2Mines[$@MS2E] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2E];
	if ($@MS2NE != 0 && $@MS2Mines[$@MS2NE] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2NE];
	if ($@MS2N != 0 && $@MS2Mines[$@MS2N] == 2) set @MSpt,@MSpt + $@MS2Field[$@MS2N];
	if ($@MS2Mines[$@MS2NW] == 2 || $@MS2Mines[$@MS2W] == 2 || $@MS2Mines[$@MS2SW] == 2 || $@MS2Mines[$@MS2S] == 2 || $@MS2Mines[$@MS2SE] == 2 || $@MS2Mines[$@MS2E] == 2 || $@MS2Mines[$@MS2NE] == 2 || $@MS2Mines[$@MS2N] == 2) dispbottom "[Points : "+@MSpt+"]";
	detachrid;
	if ($@MS2NW != 0 && $@MS2Mines[$@MS2NW] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2W != 0 && $@MS2Mines[$@MS2W] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2SW != 0 && $@MS2Mines[$@MS2SW] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2S != 0 && $@MS2Mines[$@MS2S] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2SE != 0 && $@MS2Mines[$@MS2SE] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2E != 0 && $@MS2Mines[$@MS2E] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2NE != 0 && $@MS2Mines[$@MS2NE] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2N != 0 && $@MS2Mines[$@MS2N] == 2) set $@MS2Total,$@MS2Total + 2;
	if ($@MS2Debug == 1 && $@MS2NW != 0 && $@MS2Mines[$@MS2NW] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2NW;
	if ($@MS2Debug == 1 && $@MS2W != 0 && $@MS2Mines[$@MS2W] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2W;
	if ($@MS2Debug == 1 && $@MS2SW != 0 && $@MS2Mines[$@MS2SW] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2SW;
	if ($@MS2Debug == 1 && $@MS2S != 0 && $@MS2Mines[$@MS2S] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2S;
	if ($@MS2Debug == 1 && $@MS2SE != 0 && $@MS2Mines[$@MS2SE] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2SE;
	if ($@MS2Debug == 1 && $@MS2E != 0 && $@MS2Mines[$@MS2E] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2E;
	if ($@MS2Debug == 1 && $@MS2NE != 0 && $@MS2Mines[$@MS2NE] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2NE;
	if ($@MS2Debug == 1 && $@MS2N != 0 && $@MS2Mines[$@MS2N] == 2) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+$@MS2N;
	if ($@MS2NW != 0 && $@MS2Mines[$@MS2NW] == 2) set $@MS2Mines[$@MS2NW],3;
	if ($@MS2W != 0 && $@MS2Mines[$@MS2W] == 2) set $@MS2Mines[$@MS2W],3;
	if ($@MS2SW != 0 && $@MS2Mines[$@MS2SW] == 2) set $@MS2Mines[$@MS2SW],3;
	if ($@MS2S != 0 && $@MS2Mines[$@MS2S] == 2) set $@MS2Mines[$@MS2S],3;
	if ($@MS2SE != 0 && $@MS2Mines[$@MS2SE] == 2) set $@MS2Mines[$@MS2SE],3;
	if ($@MS2E != 0 && $@MS2Mines[$@MS2E] == 2) set $@MS2Mines[$@MS2E],3;
	if ($@MS2NE != 0 && $@MS2Mines[$@MS2NE] == 2) set $@MS2Mines[$@MS2NE],3;
	if ($@MS2N != 0 && $@MS2Mines[$@MS2N] == 2) set $@MS2Mines[$@MS2N],3;
	if ($@MS2NW != 0 && $@MS2Mines[$@MS2NW] == 1) donpcevent "Tile2_"+$@MS2NW+"::OnReaction";
	if ($@MS2W != 0 && $@MS2Mines[$@MS2W] == 1) donpcevent "Tile2_"+$@MS2W+"::OnReaction";
	if ($@MS2SW != 0 && $@MS2Mines[$@MS2SW] == 1) donpcevent "Tile2_"+$@MS2SW+"::OnReaction";
	if ($@MS2S != 0 && $@MS2Mines[$@MS2S] == 1) donpcevent "Tile2_"+$@MS2S+"::OnReaction";
	if ($@MS2SE != 0 && $@MS2Mines[$@MS2SE] == 1) donpcevent "Tile2_"+$@MS2SE+"::OnReaction";
	if ($@MS2E != 0 && $@MS2Mines[$@MS2E] == 1) donpcevent "Tile2_"+$@MS2E+"::OnReaction";
	if ($@MS2NE != 0 && $@MS2Mines[$@MS2NE] == 1) donpcevent "Tile2_"+$@MS2NE+"::OnReaction";
	if ($@MS2N != 0 && $@MS2Mines[$@MS2N] == 1) donpcevent "Tile2_"+$@MS2N+"::OnReaction";
	if ($@MS2Debug == 1) debugmes "Fission cycle completed by tile "+getarg(0)+".";	
	disablenpc "Tile2_"+getarg(0);
	end;
}

//---Chain Reaction Display Maker----------------------------------------------------------------------------------
function	script	F_M2Subchain	{
	if ($@MS2Debug == 1) debugmes "Tile "+getarg(0)+" / Point Value "+$@MS2Field[getarg(0)];
	if ($MS2Window == 0) setnpcdisplay "Tile2_"+getarg(0)," ",1002;
	if ($MS2Window == 1) setnpcdisplay "Tile2_"+getarg(0),""+$@MS2Field[getarg(0)]+"",1002;
	if ($MS2Window == 0) waitingroom "----- "+$@MS2Field[getarg(0)]+" -----",0;
	if ($MS2Window == 2) setnpcdisplay "Tile2_"+getarg(0),""+$@MS2Field[getarg(0)]+"",1002;
	if ($MS2Window == 2) waitingroom "----- "+$@MS2Field[getarg(0)]+" -----",0;
	if ($MS2State[getarg(0)] == 0) set $@MS2State[getarg(0)],2;
	donpcevent "Tile2_"+getarg(0)+"::OnFlip";
	end;
}

//---Tile Dialogue----------------------------------------------------------------------------------
function	script	F_M2Tile	{
	set $@MS2NAME$,strcharinfo(0);
	if ($@MS2State[getarg(0)] == 2) end;
	if ($@MS2State[getarg(0)] == 0) goto L_Flag;
	if ($@MS2State[getarg(0)] < 2) set $@MS2State[getarg(0)],2;
	if ($@MS2Field[getarg(0)] == 0) goto L_Chain;
	if ($@MS2Field[getarg(0)] == 9) goto L_Lose;
	if ($@MS2Debug == 1) debugmes "Tile "+getarg(0)+" / Point Value "+$@MS2Field[getarg(0)];
	if ($MS2Window == 0) setnpcdisplay "Tile2_"+getarg(0)," ",1002;
	if ($MS2Window == 1) setnpcdisplay "Tile2_"+getarg(0),""+$@MS2Field[getarg(0)]+"",1002;
	if ($MS2Window == 0) waitingroom "----- "+$@MS2Field[getarg(0)]+" -----",0;
	if ($MS2Window == 2) setnpcdisplay "Tile2_"+getarg(0),""+$@MS2Field[getarg(0)]+"",1002;
	if ($MS2Window == 2) waitingroom "----- "+$@MS2Field[getarg(0)]+" -----",0;
	if ($MS2State[getarg(0)] == 0) set $@MS2State[getarg(0)],2;
	set $@MS2Total,$@MS2Total + 1;
	if ($@MS2Debug == 1) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+getarg(0);
	donpcevent "Tile2_"+getarg(0)+"::OnFlip";
	set @MSpt,@MSpt + $@MS2Field[getarg(0)];
	dispbottom "[Points : "+@MSpt+"]";
	if ($@MS2Total == (162 - $@MS2Amount)) donpcevent "Mine2Control::OnWin";
	end;
L_Flag:
	set $@MS2Total,$@MS2Total + 1;
	if ($@MS2Debug == 1) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+getarg(0);
	set $@MS2State[getarg(0)],1;
	setnpcdisplay "Tile2_"+getarg(0),"?",1242;
	donpcevent "Tile2_"+getarg(0)+"::OnFlip";
	if ($@MS2Total == (162 - $@MS2Amount)) donpcevent "Mine2Control::OnWin";
	end;
L_Lose:
	if ($@MS2Debug == 1) debugmes strcharinfo(0)+" triggered mine "+getarg(0);
	mapannounce "minesweep2","You have hit a mine!! Game over!  You will be returned to the station automatically in one minute.",1;
	set $@MS2Ready,1;
	set $@MS2Total,0;
	set $@MS2Lose,1;
	set @MSpt,0;
	specialeffect 183;
	specialeffect 107;
	specialeffect 17;
	specialeffect 8;
	specialeffect 8;
	if ($MS2Hurts == 1) percentheal $MS2Ow,0;
	if ($MS2Hurts == 2) heal $MS2Ow,0;
	donpcevent "Mine2Control::OnBoom";
	donpcevent "Tile2_"+getarg(0)+"::OnFlip";
	if ($@MS2Debug == 1) debugmes "Tile "+getarg(0)+" exploded!";
	set $@MS2CYCLE,0;
L_BoomCycle:
	if ($@MS2CYCLE == 81) goto L_BoomStop;
	set $@MS2CYCLE,$@MS2CYCLE + 1;
	donpcevent "Tile2_"+$@MS2CYCLE+"::OnFlip";
	disablenpc "Tile2_"+$@MS2CYCLE;
	goto L_BoomCycle;
L_BoomStop:
	set $@MS2CYCLE,0;
	end;
L_Chain:
	set $@MS2Total,$@MS2Total - 1;
	if ($@MS2Debug == 1) debugmes "Victory Total "+$@MS2Total+"/"+(162-$@MS2Amount)+", tile : "+getarg(0);
	set $@MS2Sequence,0;
	donpcevent "Tile2_"+getarg(0)+"::OnReaction";
	end;
}

//---Tile Animation----------------------------------------------------------------------------------
function	script	F_M2Flip	{
	if ($@MS2Lose == 1) specialeffect 150;
	if ($@MS2Lose == 0 && $@Ready == 1) specialeffect 70;
	if ($@MS2Lose == 0 && $@Ready == 0) specialeffect 423;
	end;
}

//---Tile NPC List----------------------------------------------------------------------------------
minesweep2,132,44,5	script	Tile2_1	139,{
	callfunc "F_M2Tile",1;
OnReaction:
	callfunc "F_M2Fission",1;
OnDisplay:
	callfunc "F_M2Subchain",1;
OnFlip:
	callfunc "F_M2Flip",1;
}
minesweep2,135,44,5	script	Tile2_2	139,{
	callfunc "F_M2Tile",2;
OnReaction:
	callfunc "F_M2Fission",2;
OnDisplay:
	callfunc "F_M2Subchain",2;
OnFlip:
	callfunc "F_M2Flip",2;
}
minesweep2,138,44,5	script	Tile2_3	139,{
	callfunc "F_M2Tile",3;
OnReaction:
	callfunc "F_M2Fission",3;
OnDisplay:
	callfunc "F_M2Subchain",3;
OnFlip:
	callfunc "F_M2Flip",3;
}
minesweep2,141,44,5	script	Tile2_4	139,{
	callfunc "F_M2Tile",4;
OnReaction:
	callfunc "F_M2Fission",4;
OnDisplay:
	callfunc "F_M2Subchain",4;
OnFlip:
	callfunc "F_M2Flip",4;
}
minesweep2,144,44,5	script	Tile2_5	139,{
	callfunc "F_M2Tile",5;
OnReaction:
	callfunc "F_M2Fission",5;
OnDisplay:
	callfunc "F_M2Subchain",5;
OnFlip:
	callfunc "F_M2Flip",5;
}
minesweep2,147,44,5	script	Tile2_6	139,{
	callfunc "F_M2Tile",6;
OnReaction:
	callfunc "F_M2Fission",6;
OnDisplay:
	callfunc "F_M2Subchain",6;
OnFlip:
	callfunc "F_M2Flip",6;
}
minesweep2,150,44,5	script	Tile2_7	139,{
	callfunc "F_M2Tile",7;
OnReaction:
	callfunc "F_M2Fission",7;
OnDisplay:
	callfunc "F_M2Subchain",7;
OnFlip:
	callfunc "F_M2Flip",7;
}
minesweep2,153,44,5	script	Tile2_8	139,{
	callfunc "F_M2Tile",8;
OnReaction:
	callfunc "F_M2Fission",8;
OnDisplay:
	callfunc "F_M2Subchain",8;
OnFlip:
	callfunc "F_M2Flip",8;
}
minesweep2,156,44,5	script	Tile2_9	139,{
	callfunc "F_M2Tile",9;
OnReaction:
	callfunc "F_M2Fission",9;
OnDisplay:
	callfunc "F_M2Subchain",9;
OnFlip:
	callfunc "F_M2Flip",9;
}
minesweep2,132,47,5	script	Tile2_10	139,{
	callfunc "F_M2Tile",10;
OnReaction:
	callfunc "F_M2Fission",10;
OnDisplay:
	callfunc "F_M2Subchain",10;
OnFlip:
	callfunc "F_M2Flip",10;
}
minesweep2,135,47,5	script	Tile2_11	139,{
	callfunc "F_M2Tile",11;
OnReaction:
	callfunc "F_M2Fission",11;
OnDisplay:
	callfunc "F_M2Subchain",11;
OnFlip:
	callfunc "F_M2Flip",11;
}
minesweep2,138,47,5	script	Tile2_12	139,{
	callfunc "F_M2Tile",12;
OnReaction:
	callfunc "F_M2Fission",12;
OnDisplay:
	callfunc "F_M2Subchain",12;
OnFlip:
	callfunc "F_M2Flip",12;
}
minesweep2,141,47,5	script	Tile2_13	139,{
	callfunc "F_M2Tile",13;
OnReaction:
	callfunc "F_M2Fission",13;
OnDisplay:
	callfunc "F_M2Subchain",13;
OnFlip:
	callfunc "F_M2Flip",13;
}
minesweep2,144,47,5	script	Tile2_14	139,{
	callfunc "F_M2Tile",14;
OnReaction:
	callfunc "F_M2Fission",14;
OnDisplay:
	callfunc "F_M2Subchain",14;
OnFlip:
	callfunc "F_M2Flip",14;
}
minesweep2,147,47,5	script	Tile2_15	139,{
	callfunc "F_M2Tile",15;
OnReaction:
	callfunc "F_M2Fission",15;
OnDisplay:
	callfunc "F_M2Subchain",15;
OnFlip:
	callfunc "F_M2Flip",15;
}
minesweep2,150,47,5	script	Tile2_16	139,{
	callfunc "F_M2Tile",16;
OnReaction:
	callfunc "F_M2Fission",16;
OnDisplay:
	callfunc "F_M2Subchain",16;
OnFlip:
	callfunc "F_M2Flip",16;
}
minesweep2,153,47,5	script	Tile2_17	139,{
	callfunc "F_M2Tile",17;
OnReaction:
	callfunc "F_M2Fission",17;
OnDisplay:
	callfunc "F_M2Subchain",17;
OnFlip:
	callfunc "F_M2Flip",17;
}
minesweep2,156,47,5	script	Tile2_18	139,{
	callfunc "F_M2Tile",18;
OnReaction:
	callfunc "F_M2Fission",18;
OnDisplay:
	callfunc "F_M2Subchain",18;
OnFlip:
	callfunc "F_M2Flip",18;
}
minesweep2,132,50,5	script	Tile2_19	139,{
	callfunc "F_M2Tile",19;
OnReaction:
	callfunc "F_M2Fission",19;
OnDisplay:
	callfunc "F_M2Subchain",19;
OnFlip:
	callfunc "F_M2Flip",19;
}
minesweep2,135,50,5	script	Tile2_20	139,{
	callfunc "F_M2Tile",20;
OnReaction:
	callfunc "F_M2Fission",20;
OnDisplay:
	callfunc "F_M2Subchain",20;
OnFlip:
	callfunc "F_M2Flip",20;
}
minesweep2,138,50,5	script	Tile2_21	139,{
	callfunc "F_M2Tile",21;
OnReaction:
	callfunc "F_M2Fission",21;
OnDisplay:
	callfunc "F_M2Subchain",21;
OnFlip:
	callfunc "F_M2Flip",21;
}
minesweep2,141,50,5	script	Tile2_22	139,{
	callfunc "F_M2Tile",22;
OnReaction:
	callfunc "F_M2Fission",22;
OnDisplay:
	callfunc "F_M2Subchain",22;
OnFlip:
	callfunc "F_M2Flip",22;
}
minesweep2,144,50,5	script	Tile2_23	139,{
	callfunc "F_M2Tile",23;
OnReaction:
	callfunc "F_M2Fission",23;
OnDisplay:
	callfunc "F_M2Subchain",23;
OnFlip:
	callfunc "F_M2Flip",23;
}
minesweep2,147,50,5	script	Tile2_24	139,{
	callfunc "F_M2Tile",24;
OnReaction:
	callfunc "F_M2Fission",24;
OnDisplay:
	callfunc "F_M2Subchain",24;
OnFlip:
	callfunc "F_M2Flip",24;
}
minesweep2,150,50,5	script	Tile2_25	139,{
	callfunc "F_M2Tile",25;
OnReaction:
	callfunc "F_M2Fission",25;
OnDisplay:
	callfunc "F_M2Subchain",25;
OnFlip:
	callfunc "F_M2Flip",25;
}
minesweep2,153,50,5	script	Tile2_26	139,{
	callfunc "F_M2Tile",26;
OnReaction:
	callfunc "F_M2Fission",26;
OnDisplay:
	callfunc "F_M2Subchain",26;
OnFlip:
	callfunc "F_M2Flip",26;
}
minesweep2,156,50,5	script	Tile2_27	139,{
	callfunc "F_M2Tile",27;
OnReaction:
	callfunc "F_M2Fission",27;
OnDisplay:
	callfunc "F_M2Subchain",27;
OnFlip:
	callfunc "F_M2Flip",27;
}
minesweep2,132,53,5	script	Tile2_28	139,{
	callfunc "F_M2Tile",28;
OnReaction:
	callfunc "F_M2Fission",28;
OnDisplay:
	callfunc "F_M2Subchain",28;
OnFlip:
	callfunc "F_M2Flip",28;
}
minesweep2,135,53,5	script	Tile2_29	139,{
	callfunc "F_M2Tile",29;
OnReaction:
	callfunc "F_M2Fission",29;
OnDisplay:
	callfunc "F_M2Subchain",29;
OnFlip:
	callfunc "F_M2Flip",29;
}
minesweep2,138,53,5	script	Tile2_30	139,{
	callfunc "F_M2Tile",30;
OnReaction:
	callfunc "F_M2Fission",30;
OnDisplay:
	callfunc "F_M2Subchain",30;
OnFlip:
	callfunc "F_M2Flip",30;
}
minesweep2,141,53,5	script	Tile2_31	139,{
	callfunc "F_M2Tile",31;
OnReaction:
	callfunc "F_M2Fission",31;
OnDisplay:
	callfunc "F_M2Subchain",31;
OnFlip:
	callfunc "F_M2Flip",31;
}
minesweep2,144,53,5	script	Tile2_32	139,{
	callfunc "F_M2Tile",32;
OnReaction:
	callfunc "F_M2Fission",32;
OnDisplay:
	callfunc "F_M2Subchain",32;
OnFlip:
	callfunc "F_M2Flip",32;
}
minesweep2,147,53,5	script	Tile2_33	139,{
	callfunc "F_M2Tile",33;
OnReaction:
	callfunc "F_M2Fission",33;
OnDisplay:
	callfunc "F_M2Subchain",33;
OnFlip:
	callfunc "F_M2Flip",33;
}
minesweep2,150,53,5	script	Tile2_34	139,{
	callfunc "F_M2Tile",34;
OnReaction:
	callfunc "F_M2Fission",34;
OnDisplay:
	callfunc "F_M2Subchain",34;
OnFlip:
	callfunc "F_M2Flip",34;
}
minesweep2,153,53,5	script	Tile2_35	139,{
	callfunc "F_M2Tile",35;
OnReaction:
	callfunc "F_M2Fission",35;
OnDisplay:
	callfunc "F_M2Subchain",35;
OnFlip:
	callfunc "F_M2Flip",35;
}
minesweep2,156,53,5	script	Tile2_36	139,{
	callfunc "F_M2Tile",36;
OnReaction:
	callfunc "F_M2Fission",36;
OnDisplay:
	callfunc "F_M2Subchain",36;
OnFlip:
	callfunc "F_M2Flip",36;
}
minesweep2,132,56,5	script	Tile2_37	139,{
	callfunc "F_M2Tile",37;
OnReaction:
	callfunc "F_M2Fission",37;
OnDisplay:
	callfunc "F_M2Subchain",37;
OnFlip:
	callfunc "F_M2Flip",37;
}
minesweep2,135,56,5	script	Tile2_38	139,{
	callfunc "F_M2Tile",38;
OnReaction:
	callfunc "F_M2Fission",38;
OnDisplay:
	callfunc "F_M2Subchain",38;
OnFlip:
	callfunc "F_M2Flip",38;
}
minesweep2,138,56,5	script	Tile2_39	139,{
	callfunc "F_M2Tile",39;
OnReaction:
	callfunc "F_M2Fission",39;
OnDisplay:
	callfunc "F_M2Subchain",39;
OnFlip:
	callfunc "F_M2Flip",39;
}
minesweep2,141,56,5	script	Tile2_40	139,{
	callfunc "F_M2Tile",40;
OnReaction:
	callfunc "F_M2Fission",40;
OnDisplay:
	callfunc "F_M2Subchain",40;
OnFlip:
	callfunc "F_M2Flip",40;
}
minesweep2,144,56,5	script	Tile2_41	139,{
	callfunc "F_M2Tile",41;
OnReaction:
	callfunc "F_M2Fission",41;
OnDisplay:
	callfunc "F_M2Subchain",41;
OnFlip:
	callfunc "F_M2Flip",41;
}
minesweep2,147,56,5	script	Tile2_42	139,{
	callfunc "F_M2Tile",42;
OnReaction:
	callfunc "F_M2Fission",42;
OnDisplay:
	callfunc "F_M2Subchain",42;
OnFlip:
	callfunc "F_M2Flip",42;
}
minesweep2,150,56,5	script	Tile2_43	139,{
	callfunc "F_M2Tile",43;
OnReaction:
	callfunc "F_M2Fission",43;
OnDisplay:
	callfunc "F_M2Subchain",43;
OnFlip:
	callfunc "F_M2Flip",43;
}
minesweep2,153,56,5	script	Tile2_44	139,{
	callfunc "F_M2Tile",44;
OnReaction:
	callfunc "F_M2Fission",44;
OnDisplay:
	callfunc "F_M2Subchain",44;
OnFlip:
	callfunc "F_M2Flip",44;
}
minesweep2,156,56,5	script	Tile2_45	139,{
	callfunc "F_M2Tile",45;
OnReaction:
	callfunc "F_M2Fission",45;
OnDisplay:
	callfunc "F_M2Subchain",45;
OnFlip:
	callfunc "F_M2Flip",45;
}
minesweep2,132,59,5	script	Tile2_46	139,{
	callfunc "F_M2Tile",46;
OnReaction:
	callfunc "F_M2Fission",46;
OnDisplay:
	callfunc "F_M2Subchain",46;
OnFlip:
	callfunc "F_M2Flip",46;
}
minesweep2,135,59,5	script	Tile2_47	139,{
	callfunc "F_M2Tile",47;
OnReaction:
	callfunc "F_M2Fission",47;
OnDisplay:
	callfunc "F_M2Subchain",47;
OnFlip:
	callfunc "F_M2Flip",47;
}
minesweep2,138,59,5	script	Tile2_48	139,{
	callfunc "F_M2Tile",48;
OnReaction:
	callfunc "F_M2Fission",48;
OnDisplay:
	callfunc "F_M2Subchain",48;
OnFlip:
	callfunc "F_M2Flip",48;
}
minesweep2,141,59,5	script	Tile2_49	139,{
	callfunc "F_M2Tile",49;
OnReaction:
	callfunc "F_M2Fission",49;
OnDisplay:
	callfunc "F_M2Subchain",49;
OnFlip:
	callfunc "F_M2Flip",49;
}
minesweep2,144,59,5	script	Tile2_50	139,{
	callfunc "F_M2Tile",50;
OnReaction:
	callfunc "F_M2Fission",50;
OnDisplay:
	callfunc "F_M2Subchain",50;
OnFlip:
	callfunc "F_M2Flip",50;
}
minesweep2,147,59,5	script	Tile2_51	139,{
	callfunc "F_M2Tile",51;
OnReaction:
	callfunc "F_M2Fission",51;
OnDisplay:
	callfunc "F_M2Subchain",51;
OnFlip:
	callfunc "F_M2Flip",51;
}
minesweep2,150,59,5	script	Tile2_52	139,{
	callfunc "F_M2Tile",52;
OnReaction:
	callfunc "F_M2Fission",52;
OnDisplay:
	callfunc "F_M2Subchain",52;
OnFlip:
	callfunc "F_M2Flip",52;
}
minesweep2,153,59,5	script	Tile2_53	139,{
	callfunc "F_M2Tile",53;
OnReaction:
	callfunc "F_M2Fission",53;
OnDisplay:
	callfunc "F_M2Subchain",53;
OnFlip:
	callfunc "F_M2Flip",53;
}
minesweep2,156,59,5	script	Tile2_54	139,{
	callfunc "F_M2Tile",54;
OnReaction:
	callfunc "F_M2Fission",54;
OnDisplay:
	callfunc "F_M2Subchain",54;
OnFlip:
	callfunc "F_M2Flip",54;
}
minesweep2,132,62,5	script	Tile2_55	139,{
	callfunc "F_M2Tile",55;
OnReaction:
	callfunc "F_M2Fission",55;
OnDisplay:
	callfunc "F_M2Subchain",55;
OnFlip:
	callfunc "F_M2Flip",55;
}
minesweep2,135,62,5	script	Tile2_56	139,{
	callfunc "F_M2Tile",56;
OnReaction:
	callfunc "F_M2Fission",56;
OnDisplay:
	callfunc "F_M2Subchain",56;
OnFlip:
	callfunc "F_M2Flip",56;
}
minesweep2,138,62,5	script	Tile2_57	139,{
	callfunc "F_M2Tile",57;
OnReaction:
	callfunc "F_M2Fission",57;
OnDisplay:
	callfunc "F_M2Subchain",57;
OnFlip:
	callfunc "F_M2Flip",57;
}
minesweep2,141,62,5	script	Tile2_58	139,{
	callfunc "F_M2Tile",58;
OnReaction:
	callfunc "F_M2Fission",58;
OnDisplay:
	callfunc "F_M2Subchain",58;
OnFlip:
	callfunc "F_M2Flip",58;
}
minesweep2,144,62,5	script	Tile2_59	139,{
	callfunc "F_M2Tile",59;
OnReaction:
	callfunc "F_M2Fission",59;
OnDisplay:
	callfunc "F_M2Subchain",59;
OnFlip:
	callfunc "F_M2Flip",59;
}
minesweep2,147,62,5	script	Tile2_60	139,{
	callfunc "F_M2Tile",60;
OnReaction:
	callfunc "F_M2Fission",60;
OnDisplay:
	callfunc "F_M2Subchain",60;
OnFlip:
	callfunc "F_M2Flip",60;
}
minesweep2,150,62,5	script	Tile2_61	139,{
	callfunc "F_M2Tile",61;
OnReaction:
	callfunc "F_M2Fission",61;
OnDisplay:
	callfunc "F_M2Subchain",61;
OnFlip:
	callfunc "F_M2Flip",61;
}
minesweep2,153,62,5	script	Tile2_62	139,{
	callfunc "F_M2Tile",62;
OnReaction:
	callfunc "F_M2Fission",62;
OnDisplay:
	callfunc "F_M2Subchain",62;
OnFlip:
	callfunc "F_M2Flip",62;
}
minesweep2,156,62,5	script	Tile2_63	139,{
	callfunc "F_M2Tile",63;
OnReaction:
	callfunc "F_M2Fission",63;
OnDisplay:
	callfunc "F_M2Subchain",63;
OnFlip:
	callfunc "F_M2Flip",63;
}
minesweep2,132,65,5	script	Tile2_64	139,{
	callfunc "F_M2Tile",64;
OnReaction:
	callfunc "F_M2Fission",64;
OnDisplay:
	callfunc "F_M2Subchain",64;
OnFlip:
	callfunc "F_M2Flip",64;
}
minesweep2,135,65,5	script	Tile2_65	139,{
	callfunc "F_M2Tile",65;
OnReaction:
	callfunc "F_M2Fission",65;
OnDisplay:
	callfunc "F_M2Subchain",65;
OnFlip:
	callfunc "F_M2Flip",65;
}
minesweep2,138,65,5	script	Tile2_66	139,{
	callfunc "F_M2Tile",66;
OnReaction:
	callfunc "F_M2Fission",66;
OnDisplay:
	callfunc "F_M2Subchain",66;
OnFlip:
	callfunc "F_M2Flip",66;
}
minesweep2,141,65,5	script	Tile2_67	139,{
	callfunc "F_M2Tile",67;
OnReaction:
	callfunc "F_M2Fission",67;
OnDisplay:
	callfunc "F_M2Subchain",67;
OnFlip:
	callfunc "F_M2Flip",67;
}
minesweep2,144,65,5	script	Tile2_68	139,{
	callfunc "F_M2Tile",68;
OnReaction:
	callfunc "F_M2Fission",68;
OnDisplay:
	callfunc "F_M2Subchain",68;
OnFlip:
	callfunc "F_M2Flip",68;
}
minesweep2,147,65,5	script	Tile2_69	139,{
	callfunc "F_M2Tile",69;
OnReaction:
	callfunc "F_M2Fission",69;
OnDisplay:
	callfunc "F_M2Subchain",69;
OnFlip:
	callfunc "F_M2Flip",69;
}
minesweep2,150,65,5	script	Tile2_70	139,{
	callfunc "F_M2Tile",70;
OnReaction:
	callfunc "F_M2Fission",70;
OnDisplay:
	callfunc "F_M2Subchain",70;
OnFlip:
	callfunc "F_M2Flip",70;
}
minesweep2,153,65,5	script	Tile2_71	139,{
	callfunc "F_M2Tile",71;
OnReaction:
	callfunc "F_M2Fission",71;
OnDisplay:
	callfunc "F_M2Subchain",71;
OnFlip:
	callfunc "F_M2Flip",71;
}
minesweep2,156,65,5	script	Tile2_72	139,{
	callfunc "F_M2Tile",72;
OnReaction:
	callfunc "F_M2Fission",72;
OnDisplay:
	callfunc "F_M2Subchain",72;
OnFlip:
	callfunc "F_M2Flip",72;
}
minesweep2,132,68,5	script	Tile2_73	139,{
	callfunc "F_M2Tile",73;
OnReaction:
	callfunc "F_M2Fission",73;
OnDisplay:
	callfunc "F_M2Subchain",73;
OnFlip:
	callfunc "F_M2Flip",73;
}
minesweep2,135,68,5	script	Tile2_74	139,{
	callfunc "F_M2Tile",74;
OnReaction:
	callfunc "F_M2Fission",74;
OnDisplay:
	callfunc "F_M2Subchain",74;
OnFlip:
	callfunc "F_M2Flip",74;
}
minesweep2,138,68,5	script	Tile2_75	139,{
	callfunc "F_M2Tile",75;
OnReaction:
	callfunc "F_M2Fission",75;
OnDisplay:
	callfunc "F_M2Subchain",75;
OnFlip:
	callfunc "F_M2Flip",75;
}
minesweep2,141,68,5	script	Tile2_76	139,{
	callfunc "F_M2Tile",76;
OnReaction:
	callfunc "F_M2Fission",76;
OnDisplay:
	callfunc "F_M2Subchain",76;
OnFlip:
	callfunc "F_M2Flip",76;
}
minesweep2,144,68,5	script	Tile2_77	139,{
	callfunc "F_M2Tile",77;
OnReaction:
	callfunc "F_M2Fission",77;
OnDisplay:
	callfunc "F_M2Subchain",77;
OnFlip:
	callfunc "F_M2Flip",77;
}
minesweep2,147,68,5	script	Tile2_78	139,{
	callfunc "F_M2Tile",78;
OnReaction:
	callfunc "F_M2Fission",78;
OnDisplay:
	callfunc "F_M2Subchain",78;
OnFlip:
	callfunc "F_M2Flip",78;
}
minesweep2,150,68,5	script	Tile2_79	139,{
	callfunc "F_M2Tile",79;
OnReaction:
	callfunc "F_M2Fission",79;
OnDisplay:
	callfunc "F_M2Subchain",79;
OnFlip:
	callfunc "F_M2Flip",79;
}
minesweep2,153,68,5	script	Tile2_80	139,{
	callfunc "F_M2Tile",80;
OnReaction:
	callfunc "F_M2Fission",80;
OnDisplay:
	callfunc "F_M2Subchain",80;
OnFlip:
	callfunc "F_M2Flip",80;
}
minesweep2,156,68,5	script	Tile2_81	139,{
	callfunc "F_M2Tile",81;
OnReaction:
	callfunc "F_M2Fission",81;
OnDisplay:
	callfunc "F_M2Subchain",81;
OnFlip:
	callfunc "F_M2Flip",81;
}